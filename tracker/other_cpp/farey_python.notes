
once you understand "Farey sequences" there are many implementations (math) on github
This guy compared 3 implementations. Of note here is that all algos are not equal, even though they say "Farey"

https://github.com/alidasdan/best-rational-approximation
 
He seems to be saying his "Faster algorithm" is best and points out issues in other implementations.
This work was done 11 years ago. It's python but could be translated to c.
 
It's possible that Magnusson already does something similar to speed up.
 
https://github.com/alidasdan/best-rational-approximation
 
ALGORITHMS FOR BEST RATIONAL APPROXIMATION
I give the implementations of three algorithms for best rational approximation in three different Python programs:

'ad_rat_by_cont_frac.py': Algorithm using continued fractions.
'ad_rat_by_farey.py': Algorithm using the Farey sequence.
'ad_rat_by_fast_farey.py': Faster algorithm using the Farey sequence.
 
The algorithm in 'ad_rat_by_cont_frac.py' is not difficult to design from scratch but my implementation is based closely on an implementation in [6].


I designed the other two algorithms: The algorithm using the Farey sequence is simple but is definitely not trivial. For example, the implementation at [2], which is one of the top links from a google search on 'best rational approximation', does not work correctly in all cases, e.g., it fails to find the best rational approximation n/d to pi when d is upper-bounded by 100.


The faster algorithm using the Farey sequence reduces the number of iterations drastically (except when running for the golden ratio as the target) but all algorithms work fast enough for denominator limits up to one million and potentially even beyond.


I was able to find two other references for a faster algorithm using the Farey sequence: [3] and [7]. I have not implemented the algorithm in [7] so let us focus on the algorithm in [3]. There are two implementations of this algorithm at [4] and [5]. These implementations take in two inputs: the number to approximate and a relative error threshold. My somewhat limited testing showed that they do produce the same output, which is as expected as [5] is a reimplementation of [4].


Unfortunately, as in [2], [3-5] miss many of the best rational approximations when I ran them for pi. For example, a run of either [4] or [5] for pi=3.14159265358979323844 misses 311/99 as the following output shows, where the last line is the final answer with intermediate approximations along the way

3/1	epsilon = 5.000000e-02
22/7	epsilon = 4.000000e-04
355/113	epsilon = 8.491368e-08
v=3.14159 n/d=355/113 err=0.0001
 
Changing the error calculation to the absolute error or removing the error rounding (see the code to understand what I mean by 'error rounding') did not change the result. As a result, I have decided not to post my implementation of the algorithm in [3] since my 'fast Farey algorithm' already produces the correct output.
